(function(window, $) {

    var $window = $(window),
        $document = $(document),
        $adminBar = $('#header');

    $(function() {
        var $wrap = $('#postdivrich'),
            $contentWrap = $('#content-wrap'),
            $textEditor = $('#content'),
            $tools = $('#tools'),
            textEditor = $textEditor[0],
            $postBody = $('#post-body'),
            $bottom = $('#post-status-info'),
            $menuBar = $(),
            $visualTop = $(),
            $visualEditor = $(),
            $statusBar = $(),
            $sideBar = $('#post-sidebar'),
            $postboxSidebar = $('#postbox-sidebar'),
            mceEditor,
            mceBind = function(){},
            mceUnbind = function(){},
            fixedTop = false,
            fixedBottom = false,
            fixedSideTop = false,
            fixedSideBottom = false,
            scrollTimer,
            oldTextLength = 0;
            lastScrollPosition = 0,
            pageYOffsetAtTop = 130,
            pinnedToolsTop = 56,
            sidebarBottom = 20,
            autoresizeMinHeight = 300,
            heights = {
                windowHeight: 0,
                windowWidth: 0,
                toolsHeight:0,
                adminBarHeight: 0,
                menuBarHeight: 0,
                textTopHeight:0,
                visualTopHeight: 0,
                statusBarHeight: 0,
                bottomHeight:0,
                sidebarHeight:0
            };

        var shrinkTextarea = window._.throttle(function() {
            var x = window.scrollX || document.documentElement.scrollLeft;
            var y = window.scrollY || document.documentElement.scrollTop;
            var height = parseInt( textEditor.style.height, 10 );

            textEditor.style.height = autoresizeMinHeight + 'px';

            if ( textEditor.scrollHeight > autoresizeMinHeight ) {
                textEditor.style.height = textEditor.scrollHeight + 'px';
            }

            if ( typeof x !== 'undefined' ) {
                window.scrollTo( x, y );
            }

            if ( textEditor.scrollHeight < height ) {
                adjust();
            }

        }, 300);

        function getHeights() {
            var windowWidth = $window.width();
            heights = {
                windowHeight: $window.height(),
                windowWidth: windowWidth,
                adminBarHeight: (windowWidth > 600 ? $adminBar.outerHeight() : 0),
                toolsHeight: $tools.outerHeight()|| 0,
                menuBarHeight: $menuBar.outerHeight() || 0,
                visualTopHeight: $visualTop.outerHeight() || 0,
                statusBarHeight: $statusBar.outerHeight() || 0,
                textTopHeight: $contentWrap.outerHeight() || 0,
                bottomHeight: $bottom.outerHeight() || 0,
                sidebarHeight: $sideBar.height() || 0
            }
            if (heights.menuBarHeight < 3) {
                heights.menuBarHeight = 0;
            }
        }
        
        function textEditorResize() {
            var length = textEditor.value.length;
            if (mceEditor && !mceEditor.isHidden()) {
                return;
            }
            if (length < oldTextLength) {
                shrinkTextarea();
            } else if (parseInt(textEditor.style.height, 10) < textEditor.scrollHeight) {
                textEditor.style.height = Math.ceil(textEditor.scrollHeight) + 'px';
                adjust();
            }
            oldTextLength = length;
        }

        function adjust(event) {
            var windowPos = $window.scrollTop(),
                type = event && event.type,
                resize = type !== 'scroll',
                visual = mceEditor && !mceEditor.isHidden(),
                buffer = autoresizeMinHeight,
                postBodyTop = $postBody.offset().top,
                borderWidth = 1,
                contentWrapWidth = $contentWrap.width(),
                $top, $editor, sidebarTop, footerTop, canPin,
                topPos, topHeight, editorPos, editorHeight;

            if (resize || !heights.windowHeight) {
                getHeights();
            }
            if (!visual && type === 'resize') {
                textEditorResize();
            }
            if (visual) {
                $top = $visualTop;
                $editor = $visualEditor;
                topHeight = heights.visualTopHeight
            }
            // TinyMCE still initialized
            if (!visual) {
                return;
            }

            topPos = $top.parent().offset().top;
            editorPos = $editor.offset().top;
            editorHeight = $editor.outerHeight();

            // should we pin
            canPin = visual ? autoresizeMinHeight + topHeight : autoresizeMinHeight + 20
            canPin = editorHeight > (canPin + 5);

            if (!canPin) {
                if (resize) {
                    $tools.css({
                        position: 'absolute',
                        top: 0,
                        width: contentWrapWidth,
                        borderBottom:0
                    });
                    if (visual && $menuBar.length) {
                        $menuBar.css({
                            position: 'absolute',
                            top:0,
                            width: contentWrapWidth - (borderWidth * 2)
                        });
                    }
                    $top.css({
                        position: 'absolute',
                        top: heights.menuBarHeight,
                        width : contentWrapWidth - (borderWidth * 2) - (visual ? 0 : ($top.outerWidth() - $top.width()))
                    });
                    $statusBar.attr('style', '');
                    $bottom.attr('style', '');
                }
            } else {
                // maybe pin the top
                if ( (!fixedTop || resize) &&
                    // Handle scrolling down
                    ( windowPos >= (topPos - 25 - heights.adminBarHeight) &&
                    // Handle scrolling up
                    windowPos <= (topPos - 25 - heights.adminBarHeight + editorHeight - buffer))
                ) {
                    fixedTop = true;
                    $tools.css({
                        position: 'fixed',
                        top: heights.adminBarHeight,
                        width: contentWrapWidth + (borderWidth * 2),
                        borderBottom: '1px solid #777'
                    });
                    if (visual && $menuBar.length) {
                        $menuBar.css({
                            position: 'fixed',
                            top: heights.adminBarHeight + 25,
                            width: contentWrapWidth - (borderWidth * 2) - (visual ? 0 : ($top.outerHeight() - $top.width())),
                        });
                    }
                    $top.css({
                        position: 'fixed',
                        top: heights.adminBarHeight + heights.menuBarHeight + 25,
                        width: contentWrapWidth - (borderWidth * 2) - (visual ? 0 : ($top.outerHeight() - $top.width())),
                        borderBottom: '1px solid #777'
                    });
                // Maybe unpin the top
                } else if (fixedTop || resize) {
                    // Handle scrolling top
                    if (windowPos <= (topPos - 25 - heights.menuBarHeight)) {
                        fixedTop = false;
                        $tools.css({
                            position: 'absolute',
                            top:0,
                            width: contentWrapWidth,
                            borderBottom:0,
                        });
                        if (visual && $menuBar.length) {
                            $menuBar.css({
                                position: 'absolute',
                                top:0,
                                width: contentWrapWidth - (borderWidth * 2)
                            });
                        }
                        $top.css({
                            position: 'absolute',
                            top:0,
                            width: contentWrapWidth - (borderWidth * 2) - ( visual ? 0 : ( $top.outerWidth() - $top.width() ) )
                        });
                    // Handle scrolling down
                    } else if (windowPos >= (topPos - 25 - heights.adminBarHeight + editorHeight - buffer)) {
                        fixedTop = false;
                        $tools.css({
                            position: 'absolute',
                            top: editorHeight - buffer,
                            width: contentWrapWidth,
                            borderBottom:0
                        });
                        if (visual && $menuBar.length) {
                            $menuBar.css({
                                position: 'absolute',
                                top: editorHeight - buffer,
                                width: contentWrapWidth - (borderWidth * 2)
                            });
                        }
                        $top.css({
                            position: 'absolute',
                            top: editorHeight - buffer + heights.menuBarHeight,
                            width: contentWrapWidth - (borderWidth * 2) - (visual ? 0 : ($top.outerWidth() - $top.width()))
                        })
                    }
                }

                // Maybe adjust the bottom bar
                if ( (!fixedBottom || resize) &&
                    (windowPos + heights.windowHeight) <= (editorPos + editorHeight + heights.bottomHeight + heights.statusBarHeight + borderWidth)
                ) {
                    if (event && event.deltaHeight > 0 && event.deltaHeight < 100) {
                        window.scrollBy(0, event.deltaHeight);
                    } else if (visual) {
                        fixedBottom = true;
                        $statusBar.css({
                            position: 'fixed',
                            bottom: heights.bottomHeight,
                            visibility: '',
                            width: contentWrapWidth - (borderWidth * 2),
                            borderTop: '1px solid #777'
                        });
                        $bottom.css({
                            position: 'fixed',
                            bottom: 25,
                            width: contentWrapWidth
                        })
                    }
                } else if (fixedBottom || (fixedBottom || resize) &&
                    (windowPos + heights.windowHeight) > (editorPos + editorHeight + heights.bottomHeight + heights.statusBarHeight + borderWidth)
                ) {
                    fixedBottom = false;
                    $statusBar.attr('style', '');
                    $bottom.attr('style', '');
                }
            }

            // sidebar pinning
            if ($postboxSidebar.width() < 400 && heights.windowWidth > 600 &&
                $document.height() > ( $sideBar.height() + postBodyTop + 120) &&
                heights.windowHeight < editorHeight
            ) {
                if ( (heights.sidebarHeight + pinnedToolsTop + sidebarBottom) > heights.windowHeight || fixedSideTop || fixedSideBottom) {
                    // Reset when scrolling to the top
                    if (windowPos + pinnedToolsTop <= postBodyTop) {
                        $sideBar.attr('style', '');
                        fixedSideTop = fixedSideBottom = false;
                    } else {
                        if (windowPos > lastScrollPosition) {
                            // scrolling down
                            if (fixedSideTop) {
                                // let it scroll
                                fixedSideTop = false;
                                sidebarTop = $sideBar.offset().top - heights.adminBarHeight;

                                $sideBar.css({
                                    position: 'absolute',
                                    top: sidebarTop,
                                    bottom: '',
                                    width: $sideBar.width()
                                });
                            } else if (!fixedSideBottom && heights.sidebarHeight + $sideBar.offset().top + sidebarBottom < windowPos + heights.windowHeight) {
                                // pin the bottom
                                fixedSideBottom = true;
                                $sideBar.css({
                                    position: 'fixed',
                                    top: 'auto',
                                    bottom: sidebarBottom,
                                    width: $sideBar.width()
                                });
                            }
                        } else if (windowPos < lastScrollPosition) {
                            // scrolling up
                            if (fixedSideBottom) {
                                // let it scroll
                                fixedSideBottom = false;

                                sidebarTop = $sideBar.offset().top - sidebarBottom;

                                $sideBar.css({
                                    position: 'absolute',
                                    top: sidebarTop,
                                    bottom: '',
                                    width: $sideBar.width()
                                });
                            } else if (!fixedSideTop && $sideBar.offset().top >= windowPos + pinnedToolsTop) {
                                // pin the top
                                fixedSideTop = false;
                                $sideBar.css({
                                    position: 'fixed',
                                    top: pinnedToolsTop,
                                    bottom: '',
                                    width: $sideBar.width()
                                });
                            }
                        }
                    }
                } else {
                    // if the sidebar container is smaller than the viewport, the pin/upin the top whenscrolling
                    if (windowPos >= (postBodyTop - pinnedToolsTop)) {
                        $sideBar.css({
                            position: 'fixed',
                            top: pinnedToolsTop,
                            width: $sideBar.width()
                        });
                    } else {
                        $sideBar.attr('style', '');
                    }
                    fixedSideTop = fixedSideBottom = false;
                }
                lastScrollPosition = windowPos;
            } else {
                $sideBar.attr('style', '');
                fixedSideTop = fixedSideBottom = false;
            }

            if (resize) {
                $contentWrap.css({
                    paddingTop: 25
                })
                if (visual) {
                    $visualEditor.css({
                        paddingTop: heights.visualTopHeight + heights.menuBarHeight
                    });
                } else {
                    $textEditor.css({
                        paddingTop: heights.textTopHeight
                    })
                }
            }
        }

        $document.on('tinymce-editor-init.editor-expand', function(event, editor) {
            // Make sure it's the main editor;
            if (editor.id !== 'content') {
                return;
            }
            // copy the mceEditor instance
            mceEditor = editor;
            // set the minimum height to the initial viewport height
            editor.settings.autoresize_min_height = autoresizeMinHeight;
            // get the necessary UI elements
            $visualTop = $contentWrap.find('.mce-toolbar-grp');
            $visualEditor = $contentWrap.find('.mce-edit-area');
            $statusBar = $contentWrap.find('.mce-statusbar');
            $menuBar = $contentWrap.find('.mce-menubar');

            function initializeResize(callback) {
                for (var i = 1; i < 6; i++) {
                    setTimeout(callback, 500 * i);
                }
            }

            if ($wrap.hasClass('editor-expand')) {
                initializeResize(adjust);
            }
        });

        function afterScroll() {
            clearTimeout( scrollTimer);
            scrollTimer = setTimeout(adjust, 100);
        }

        function on() {
            if (window.pageYOffset && window.pageYOffset > pageYOffsetAtTop) {
                window.scrollTo(window.pageYOffset, 0);
            }
            $wrap.addClass('editor-expand');
            // adjust when window is scrolled or resized
            $window.on('scroll.editor-expand resize.editor-expand', function (event) {
                adjust(event.type);
                afterScroll();
            });
            $textEditor.on('focus.editor-expand input.editor-expand propertychange.editor-expand', textEditorResize);
            mceBind();

            if (mceEditor) {
                mceEditor.settings.rg_autoresize_on = true;
                mceEditor.execCommand('rgAutoResizeOn');
                if (!mceEditor.isHidden()) {
                    mceEditor.execCommand('rgAutoResize');
                }
            }

            if (!mceEditor || mceEditor.isHidden()) {
                textEditorResize();
            }
            adjust();
            $document.trigger('editor-expand-on');
        }

        function off() {
            // Scroll to the top when triggering this from JS
            // Ensure tools are reset properly
            if (window.pageYOffset && window.pageYOffset > pageYOffsetAtTop) {
                window.scrollTo(window.pageXOffset, 0);
            }
            $wrap.removeClass('editor-expand');
            $window.off('.editor-expand');
            $document.off('.editor-expand');
            $textEditor.off('.editor-expand');
            mceUnbind();
            // reset all css
            $.each([$visualTop, $tools, $bottom, $statusBar, $contentWrap, $visualEditor], function (i, element) {
                element && element.attr('style', '');
            });

            fixedTop = fixedBottom = fixedSideBottom = fixedSideTop = false;

            if (mceEditor) {
                mceEditor.settings.rg_autoresize_on = false;
                mceEditor.execCommand('rgAutoResizeOff');
            }
            $document.trigger('editor-expand-off');
        }

        // start on load
        if ($wrap.hasClass('editor-expand')) {
            on();
        }

        window.editorExpand = {
            on:on,
            off:off
        }

    })

})(window, $);